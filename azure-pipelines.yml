name: $(BuildID)-$(Build.SourceBranchName)

trigger:
- master
- develop

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  CGO_ENABLED: 0
  GOOS: linux

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:

    - task: Go@0
      displayName: get github.com/gorilla/mux
      inputs:
        command: 'get'
        arguments: 'github.com/gorilla/mux'
    - task: Go@0
      displayName: get go.mongodb.org/mongo-driver/bson
      inputs:
        command: 'get'
        arguments: 'go.mongodb.org/mongo-driver/bson'
    - task: Go@0
      displayName: get go.mongodb.org/mongo-driver/mongo
      inputs:
        command: 'get'
        arguments: 'go.mongodb.org/mongo-driver/mongo'
    - task: Go@0
      displayName: get go.mongodb.org/mongo-driver/mongo
      inputs:
        command: 'get'
        arguments: 'github.com/auth0/go-jwt-middleware'
    - task: Go@0
      displayName: get go.mongodb.org/mongo-driver/mongo
      inputs:
        command: 'get'
        arguments: 'github.com/dgrijalva/jwt-go'

    - task: Go@0
      displayName: build
      inputs:
        command: 'build'
        arguments: '-a -installsuffix cgo -o $(Build.ArtifactStagingDirectory)/main -v ./src/ITLabReports/api'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'itlab-reports-api-build'
        publishLocation: 'pipeline'
<<<<<<< HEAD

- stage: Test
  displayName: Test reports service
  jobs:
  - job: Test
    displayName: Test

    pool:
      vmImage: 'ubuntu-latest'

=======

- stage: Test
  displayName: Test reports service
  jobs:
  - job: Test
    displayName: Test

    pool:
      vmImage: 'ubuntu-latest'

>>>>>>> develop
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: 'itlab-reports-api-build'
        buildType: 'current'
        targetPath: './tests/e2e/api/itlab-reports-api-build'
    - task: CmdLine@2
      displayName: run testmace
      inputs:
        script: 'docker-compose --no-ansi up testmace'
        workingDirectory: './tests/e2e/'
    - task: CmdLine@2
      displayName: show logs
      inputs:
        script: 'docker-compose --no-ansi logs test-api'
        workingDirectory: './tests/e2e/'
    - task: CopyFiles@2
      inputs:
        SourceFolder: 'tests/e2e/out'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        CleanTargetFolder: true
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'testmace*.xml'
        searchFolder: '$(Build.ArtifactStagingDirectory)'
        failTaskOnFailedTests: true
